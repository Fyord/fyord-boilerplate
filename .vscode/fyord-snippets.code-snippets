{
	"Component": {
		"scope": "typescript,typescriptreact",
		"prefix": "fy-component",
		"body": [
			"import { Component, ParseJsx } from 'fyord';",
			"import styles from './$2.module.scss';",
			"",
			"export class $1 extends Component {",
				"\tHtml = async () => <div>$0</div>;",
				"",
				"\tBehavior = () => { }",
			"}",
			""
		]
	},
	"Page": {
		"scope": "typescript,typescriptreact",
		"prefix": "fy-page",
		"body": [
			"import { Page, ParseJsx, Route } from 'fyord';",
			"import styles from './$2.module.scss';",
			"",
			"export class $1 extends Page {",
				"\tRoute = (route: Route) => route.path === $3;",
			"",
				"\tHtml = async () => {",
					"\t\tthis.seoService.SetDefaultTags('$4');",
			"",
					"\t\treturn <div>$0</div>;",
				"\t}",
			"  ",
				"\tBehavior = () => { }",
			"}",
			""
		]
	},
	"Page Spec": {
		"scope": "typescript,typescriptreact",
		"prefix": "fy-spec-page",
		"body": [
			"import { RenderModes, Route, TestHelpers } from 'fyord';",
			"",
			"describe('$1', () => {",
				"\tlet classUnderTest: $1$0;",
				"\tconst pageMocks = TestHelpers.GetPageMocks();",
			"",
				"\tbeforeEach(() => {",
					"\t\tclassUnderTest = new $1(",
						"\t\t\tpageMocks.mockSeoService.Object,",
						"\t\t\tpageMocks.mockApp.Object,",
						"\t\t\tpageMocks.mockDocument.Object);",
				"\t});",
			"",
				"\tit('should construct', () => {",
					"\t\texpect(classUnderTest).toBeDefined();",
				"\t});",
			"",
				"\tit('should have the correct render mode', () => {",
					"\t\texpect(classUnderTest.RenderMode = RenderModes.$2Hybrid);",
				"\t});",
			"",
				"\tit('should return true for routes that match', () => {",
					"\t\tconst route = { path: $3 } as Route;",
					"\t\texpect(classUnderTest.Route(route)).toBeTruthy();",
				"\t});",
			"",
				"\tit('should return false for routes that do not match', () => {",
					"\t\tconst route = { path: $4 } as Route;",
					"\t\texpect(classUnderTest.Route(route)).toBeFalsy();",
				"\t});",
			"",
				"\tit('should render html', async () => {",
					"\t\texpect(await classUnderTest.Html()).toBeDefined();",
				"\t});",
			"",
				"\tit('should have appropriate behavior', async () => {",
					"\t\tconst renderedComponent = document.createElement('div');",
					"\t\trenderedComponent.innerHTML = await classUnderTest.Render();",
					"\t\tpageMocks.mockDocument.Setup(d => d.getElementById(classUnderTest.Id), renderedComponent);",
			"",
					"\t\tclassUnderTest.Behavior();",
			"",
					"\t\tsetTimeout(() => {",
						"\t\t\t// fire any attached events",
					"\t\t});",
			"",
					"\t\tconst behaviorExpectationsMet = await TestHelpers.TimeLapsedCondition(() => {",
						"\t\t\treturn true; // assertions proving expected behavior was met",
					"\t\t});",
					"\t\texpect(behaviorExpectationsMet).toBeTruthy();",
				"\t});",
			"});",
			""
		]
	}
}